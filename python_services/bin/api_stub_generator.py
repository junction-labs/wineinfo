import os, sys

sys.path.append(
    os.path.abspath(
        os.path.join(os.path.dirname(__file__), os.path.pardir, os.path.pardir)
    )
)
from typing import Dict, get_origin
from python_services.app.common.api import *


def snake_to_pascal(snake_str: str) -> str:
    components = snake_str.split("_")
    return "".join(x.title() for x in components)


def validate_service_def(
    service_name: str, service_def: Dict[str, ServiceMethodDef]
) -> None:
    for method_name, method_def in service_def.items():
        params_type = method_def["params"]
        if params_type is not None and not (
            isinstance(params_type, type) and issubclass(params_type, BaseModel)
        ):
            raise ValueError(
                f"{service_name}.{method_name}: params must be a BaseModel, got {params_type}"
            )


def generate_method(service_name, method_name: str, method_def: dict) -> str:
    params = (
        ", "
        if method_def["params"] is None
        else f"request: {method_def["params"].__name__}, "
    )
    params += "options: HttpClientOptions = HttpClientOptions()"

    if method_def["response"] is None:
        return_type = "None"
    else:
        return_type = method_def["response"].__name__

    request_var = "None" if method_def["params"] is None else "request.model_dump()"
    api_call = f"self.client.{method_def['method'].lower()}({service_name}['{method_name}']['path'], {request_var}, options)"

    if method_def["response"] is None:
        body = api_call
    elif get_origin(method_def["response"]) == list:
        body = f"TypeAdapter({return_type}).validate_python({api_call})"
    else:
        body = f"{return_type}.model_validate({api_call})"

    return f"""
    def {method_name}(self, {params}) -> {return_type}:
       return {body}"""


def generate_remote_service(
    service_name: str, service_def: Dict[str, ServiceMethodDef]
) -> str:
    validate_service_def(service_name, service_def)
    ret = f"""class {snake_to_pascal(service_name)}:
    def __init__(self, client: HttpClient):
        self.client = client
"""
    for name, defn in service_def.items():
        ret += generate_method(service_name, name, defn)
        ret += "\n"
    return ret


services = {
    "SEARCH_SERVICE": SEARCH_SERVICE,
    "EMBEDDINGS_SERVICE": EMBEDDINGS_SERVICE,
    "PERSIST_SERVICE": PERSIST_SERVICE,
    "SOMMELIER_SERVICE": SOMMELIER_SERVICE,
}
print("""
from pydantic import TypeAdapter
from .api import *
from .http_client import HttpClient, HttpClientOptions

#
# FILE GENERATED BY api_stub_generator.py
#          

""")
for name, definition in services.items():
    print(generate_remote_service(name, definition))
    print()
